# 패키지 임포트
    # 경로 설정을 위한 os 패키지 임포트
    # 파이토치 패키지 임포트
    # 파이토치의 nn 패키지 임포트
    # 이미지를 다루기 위한 PIL 패키지 임포트
    # 이미지 크기를 조절하는 함수 임포트
    # 이미지를 텐서로 변환하는 함수 임포트

# 타겟하는 학습 세팅을 설정
    # 타겟 폴더 설정
    # 타겟 폴더가 존재하는지 확인
 
# 하이퍼파라미터 로드
    # hparam.txt 파일을 읽기 모드로 열기
    # 파일의 모든 줄을 읽어서 리스트로 저장
    # 읽어온 데이터 출력

    # 학습률 저장
    # 이미지 사이즈 저장
    # 클래스 개수 저장
    # 배치 크기 저장
    # 은닉층 크기 저장
    # 에포크 수 저장
    # 결과 폴더 저장

    # GPU 사용 여부에 따라 device 설정

# 모델 class 만들기
    # nn.Module을 상속받는 MLP 클래스 선언
        # 클래스 초기화: MLP 레이어 정의
            # 상속받은 상위 클래스의 초기화 메서드 호출
            # 이미지 사이즈 저장
            # 첫 번째 MLP 레이어 선언(입력층 -> 은닉층1)
            # 두 번째 MLP 레이어 선언(은닉층1 -> 은닉층2)
            # 세 번째 MLP 레이어 선언(은닉층2 -> 은닉층3)
            # 네 번째 MLP 레이어 선언(은닉층3 -> 출력층)
        # 순전파: 데이터가 레이어 통과하는 방식 지정
            # 입력 텐서의 배치 크기 저장(x: [batch_size, 28, 28, 1])
            # 28*28 픽셀 이미지를 1차원 벡터로 변환(펼치기)
            # 순전파 수행: 입력 이미지를 순차적으로 MLP 레이어에 통과시킴
            # [batch_size, 500]
            # [batch_size, 500]
            # [batch_size, 500]
            # [batch_size, 10]
            # 최종 출력 반환
        
# 모델 선언

# 저장된 모델 가중치 불러오기
    # 저장된 모델 가중치 불러오기
    # 경로 설정
    # 타겟 폴더 내의 myMLP_best.ckpt 파일 경로
    # 모델에 가중치 저장

# 추론 데이터를 가지고 오기
    # 추론할 이미지 경로
    # 이미지가 존재하는지 확인
    # 이미지를 흑백으로 변환

# 학습 과정에서 사용했던 전처리 과정을 그대로 실행 
    # 크기 맞추기: 이미지 크기를 조절하는 함수 선언
    # 크기 맞추기: 이미지를 텐서로 변환하는 함수 선언
    # 이미지를 텐서로 변환 후 device로 이동

# 모델 추론 진행
    # 모델에 이미지 입력 후 출력값 저장
# 추론 결과를 우리가 이해할 수 있는 형태로 변환 
    # 출력값 중 가장 큰 값의 인덱스를 추론 결과로 저장

    # 모델이 추론한 결과 출력